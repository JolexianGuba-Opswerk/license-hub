generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserDetails {
  id               String              @id @default(uuid()) @db.Uuid
  name             String
  email            String              @unique
  role             Role
  department       Department
  position         String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  managerId        String?             @db.Uuid
  addedById        String?             @db.Uuid
  licensesAdded    License[]           @relation("LicenseAddedBy")
  licenseKeysAdded LicenseKey[]        @relation("LicenseKeyAddedBy")
  Notification     Notification[]
  addedBy          UserDetails?        @relation("AddedBy", fields: [addedById], references: [id])
  addedUsers       UserDetails[]       @relation("AddedBy")
  manager          UserDetails?        @relation("UserManager", fields: [managerId], references: [id])
  subordinates     UserDetails[]       @relation("UserManager")
  approvedRequests RequestItem[]       @relation("RequestItemApprover")
  assignedLicenses LicenseAssignment[] @relation("LicenseAssignmentAssigner")
  requests          LicenseRequest[]    @relation("UserRequests")       
  managedRequests   LicenseRequest[]    @relation("ManagerApprovals")    

}

model License {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  name           String
  vendor         String?
  description    String?
  totalSeats     Int           @default(0)
  cost           Float?
  expiryDate     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  addedById      String?       @db.Uuid
  status         LicenseStatus @default(AVAILABLE)
  type           LicenseType   @default(SEAT_BASED)
  licenseAddedBy UserDetails?  @relation("LicenseAddedBy", fields: [addedById], references: [id])
  licenseKeys    LicenseKey[]
  RequestItem    RequestItem[]
}

model LicenseKey {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  licenseId String
  key       String?
  status    LicenseKeyStatus @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  addedById String?          @db.Uuid
  addedBy   UserDetails?     @relation("LicenseKeyAddedBy", fields: [addedById], references: [id])
  license   License          @relation(fields: [licenseId], references: [id])

  assignment LicenseAssignment?
}

model LicenseRequest {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) 
  userId    String       @db.Uuid
  user      UserDetails  @relation("UserRequests", fields: [userId], references: [id])

  managerId String?      @db.Uuid
  manager   UserDetails? @relation("ManagerApprovals", fields: [managerId], references: [id])

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  items     RequestItem[]
}


model RequestItem {
  id          String          @id @default(dbgenerated("gen_random_uuid()"))
  requestId   String
  type        RequestItemType
  description String?
  status      RequestStatus   @default(PENDING)

  licenseId String?
  license   License? @relation(fields: [licenseId], references: [id])

  request     LicenseRequest      @relation(fields: [requestId], references: [id])
  assignments LicenseAssignment[]

  approvedBy String? @db.Uuid
  approver   UserDetails? @relation("RequestItemApprover", fields: [approvedBy], references: [id])
  approvedAt DateTime?
}

model LicenseAssignment {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  userId       String
  licenseKeyId String     @unique
  licenseKey   LicenseKey @relation(fields: [licenseKeyId], references: [id])

  status AssignmentStatus @default(ACTIVE)

  requestItemId String
  requestItem   RequestItem @relation(fields: [requestItemId], references: [id])

  assignedBy String? @db.Uuid
  assigner   UserDetails? @relation("LicenseAssignmentAssigner", fields: [assignedBy], references: [id])
  assignedAt DateTime?
}

model ProcurementRequest {
  id          String            @id @default(dbgenerated("gen_random_uuid()"))
  licenseId   String
  requestedBy String
  approvedBy  String?
  status      ProcurementStatus @default(PENDING)
  quantity    Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ProcurementDocument {
  id                   String   @id @default(dbgenerated("gen_random_uuid()"))
  procurementRequestId String
  fileUrl              String
  uploadedAt           DateTime @default(now())
}

model Notification {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String           @db.Uuid
  title     String
  message   String
  type      NotificationType
  url       String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      UserDetails      @relation(fields: [userId], references: [id])
}

enum RequestItemType {
  EMAIL
  LICENSE
  OTHER
}

enum AssignmentStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum NotificationType {
  LICENSE_CREATED
  LICENSE_ASSIGNED
  LICENSE_EXPIRED
  LICENSE_REQUESTED
  PROCUREMENT_REQUEST
  USER_ADDED
  GENERAL
}

enum Role {
  EMPLOYEE
  MANAGER
  ADMIN
  ACCOUNT_OWNER
  FINANCE
}

enum Department {
  ITSG
  SRE
  HR
  SSED
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  FULFILLED
}

enum ProcurementStatus {
  PENDING
  APPROVED
  DENIED
  PURCHASED
}

enum LicenseStatus {
  AVAILABLE
  FULL
  EXPIRED
}

enum LicenseKeyStatus {
  ACTIVE
  INACTIVE
  ASSIGNED
  REVOKED
}

enum LicenseType {
  SEAT_BASED
  KEY_BASED
}
