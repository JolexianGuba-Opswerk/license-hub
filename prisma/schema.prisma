generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserDetails {
  id                          String                  @id @default(uuid()) @db.Uuid
  name                        String
  email                       String                  @unique
  role                        Role
  department                  Department
  position                    String?
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  managerId                   String?                 @db.Uuid
  addedById                   String?                 @db.Uuid
  licensesAdded               License[]               @relation("LicenseAddedBy")
  licenseKeysAdded            LicenseKey[]            @relation("LicenseKeyAddedBy")
  Notification                Notification[]
  addedBy                     UserDetails?            @relation("AddedBy", fields: [addedById], references: [id])
  addedUsers                  UserDetails[]           @relation("AddedBy")
  manager                     UserDetails?            @relation("UserManager", fields: [managerId], references: [id])
  subordinates                UserDetails[]           @relation("UserManager")
  assignedLicenses            LicenseAssignment[]     @relation("LicenseAssignmentAssigner")
  requestorId                 LicenseRequest[]        @relation("Requestor")
  managerRequestedFor         LicenseRequest[]        @relation("ManagerRequestedFor")
  requestItemOwnerApprover    RequestItemApproval[]   @relation("RequestItemOwnerApprover")
  LicenseAssignment           LicenseAssignment[]
  procurementRequestsMade     ProcurementRequest[]    @relation("ProcurementRequestedBy")
  procurementRequestsApproved ProcurementRequest[]    @relation("ProcurementApprovedBy")
  ProcurementAttachment       ProcurementAttachment[]
  AuditLog                    AuditLog[]
}

model License {
  id                 String               @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  vendor             String?
  description        String?
  totalSeats         Int                  @default(0)
  cost               Float?
  owner              Department           @default(ITSG)
  expiryDate         DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  addedById          String?              @db.Uuid
  status             LicenseStatus        @default(AVAILABLE)
  type               LicenseType          @default(SEAT_BASED)
  licenseAddedBy     UserDetails?         @relation("LicenseAddedBy", fields: [addedById], references: [id])
  licenseKeys        LicenseKey[]
  RequestItem        RequestItem[]
  ProcurementRequest ProcurementRequest[]
}

model LicenseKey {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  licenseId String
  key       String?
  seatLink  String?
  status    LicenseKeyStatus @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  addedById String?          @db.Uuid
  addedBy   UserDetails?     @relation("LicenseKeyAddedBy", fields: [addedById], references: [id])
  license   License          @relation(fields: [licenseId], references: [id])

  assignment LicenseAssignment?
}

model LicenseRequest {
  id          String        @id @default(dbgenerated("gen_random_uuid()"))
  requestorId String        @db.Uuid
  requestor   UserDetails   @relation("Requestor", fields: [requestorId], references: [id])
  status      RequestStatus @default(PENDING)

  requestedForId String?      @db.Uuid
  requestedFor   UserDetails? @relation("ManagerRequestedFor", fields: [requestedForId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items RequestItem[]
}

model RequestItem {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  requestId     String
  type          RequestItemType
  justification String?
  status        RequestStatus   @default(PENDING)
  licenseId     String?
  license       License?        @relation(fields: [licenseId], references: [id])

  // FOR NONE EXISTING LICENSES
  requestedLicenseName   String?
  requestedLicenseVendor String?

  // FOR NEW USER 
  newUserFullName   String?
  newUserDepartment String?
  newUserRole       String?
  newUserPosition   String?
  newUserManagerId  String?

  request            LicenseRequest        @relation(fields: [requestId], references: [id])
  assignments        LicenseAssignment[]
  approvals          RequestItemApproval[]
  ProcurementRequest ProcurementRequest[]
}

model RequestItemApproval {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  requestItemId String
  approverId    String        @db.Uuid
  approver      UserDetails   @relation("RequestItemOwnerApprover", fields: [approverId], references: [id])
  level         ApprovalLevel
  status        RequestStatus
  reason        String?
  approvedAt    DateTime?
  requestItem   RequestItem   @relation(fields: [requestItemId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum ApprovalLevel {
  MANAGER
  ITSG
  OWNER
}

model LicenseAssignment {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  userId       String     @db.Uuid
  licenseKeyId String     @unique
  licenseKey   LicenseKey @relation(fields: [licenseKeyId], references: [id])

  status AssignmentStatus @default(ACTIVE)

  requestItemId String
  requestItem   RequestItem  @relation(fields: [requestItemId], references: [id])
  user          UserDetails  @relation(fields: [userId], references: [id])
  assignedBy    String?      @db.Uuid
  assigner      UserDetails? @relation("LicenseAssignmentAssigner", fields: [assignedBy], references: [id])
  assignedAt    DateTime?
}

model ProcurementRequest {
  id            String  @id @default(dbgenerated("gen_random_uuid()"))
  licenseId     String? // if requesting an existing license
  requestItemId String?
  requestedById String  @db.Uuid
  approvedById  String? @db.Uuid

  itemName         String?
  itemDescription  String
  justification    String
  vendor           String
  vendorEmail      String?
  price            Decimal?  @db.Decimal(10, 2)
  currency         String    @default("PHP")
  quantity         Int       @default(1)
  totalCost        Decimal?  @db.Decimal(12, 2)
  expectedDelivery DateTime?

  status          ProcurementStatus @default(PENDING)
  rejectionReason String?
  notes           String?
  cc              Department        @default(ITSG)
  purchaseStatus  PurchaseStage     @default(NOT_STARTED)

  // AUDIT FIELDS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  license           License?                @relation(fields: [licenseId], references: [id])
  requestItem       RequestItem?            @relation(fields: [requestItemId], references: [id])
  requestedBy       UserDetails             @relation("ProcurementRequestedBy", fields: [requestedById], references: [id])
  approvedBy        UserDetails?            @relation("ProcurementApprovedBy", fields: [approvedById], references: [id])
  approvedcreatedAt DateTime?               @default(now())
  approvedupdatedAt DateTime?               @updatedAt
  // ATTACHMENTS
  attachments       ProcurementAttachment[]
}

enum ProcurementStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
  COMPLETED
}

enum PurchaseStage {
  NOT_STARTED
  IN_PROGRESS
  ORDERED
  PURCHASED
  CLOSED
  COMPLETED
}

model ProcurementAttachment {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  procurementId String
  fileName      String
  fileUrl       String
  uploadedAt    DateTime @default(now())
  uploadedById  String   @db.Uuid

  procurement ProcurementRequest @relation(fields: [procurementId], references: [id])
  uploadedBy  UserDetails        @relation(fields: [uploadedById], references: [id])
}

model ProcurementDocument {
  id                   String   @id @default(dbgenerated("gen_random_uuid()"))
  procurementRequestId String
  fileUrl              String
  uploadedAt           DateTime @default(now())
}

model Notification {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String           @db.Uuid
  title     String
  message   String
  type      NotificationType
  url       String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      UserDetails      @relation(fields: [userId], references: [id])
}

model AuditLog {
  id     String       @id @default(dbgenerated("gen_random_uuid()"))
  userId String?      @db.Uuid
  user   UserDetails? @relation(fields: [userId], references: [id])

  entity   String
  entityId String?

  action      AuditAction
  description String
  changes     Json?

  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

enum AuditAction {
  CREATED
  COMPLETED
  UPDATED
  APPROVED
  DENIED
  DELETED
  REVOKED
  LOGIN
  LOGOUT
  ASSIGNED
  UPLOADED
}

enum RequestItemType {
  EMAIL
  LICENSE
  OTHER
}

enum AssignmentStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum NotificationType {
  LICENSE_CREATED
  LICENSE_ASSIGNED
  LICENSE_EXPIRED
  LICENSE_REQUESTED
  PROCUREMENT_CREATED
  PROCUREMENT_APPROVED
  PROCUREMENT_REJECTED
  USER_ADDED
  GENERAL
}

enum Role {
  EMPLOYEE
  MANAGER
  ADMIN
  ACCOUNT_OWNER
  TEAM_LEAD
  FINANCE
}

enum Department {
  ITSG
  SRE
  HR
  SSED
  FINANCE
}

enum RequestStatus {
  PENDING
  REVIEWING
  APPROVED
  ASSIGNING
  DENIED
  PURCHASING
  FULFILLED
}

enum LicenseStatus {
  AVAILABLE
  FULL
  EXPIRED
}

enum LicenseKeyStatus {
  ACTIVE
  INACTIVE
  ASSIGNED
  REVOKED
}

enum LicenseType {
  SEAT_BASED
  KEY_BASED
}
