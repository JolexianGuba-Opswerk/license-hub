generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserDetails {
  id               String        @id @default(uuid()) @db.Uuid
  name             String
  email            String        @unique
  role             Role
  department       Department
  position         String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  managerId        String?       @db.Uuid
  addedById        String?       @db.Uuid
  licensesAdded    License[]     @relation("LicenseAddedBy")
  licenseKeysAdded LicenseKey[]  @relation("LicenseKeyAddedBy")
  addedBy          UserDetails?  @relation("AddedBy", fields: [addedById], references: [id])
  addedUsers       UserDetails[] @relation("AddedBy")
  manager          UserDetails?  @relation("UserManager", fields: [managerId], references: [id])
  subordinates     UserDetails[] @relation("UserManager")
}

model License {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  name           String
  vendor         String?
  description    String?
  totalSeats     Int           @default(0)
  cost           Float?
  expiryDate     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  addedById      String?       @db.Uuid
  status         LicenseStatus @default(AVAILABLE)
  type           LicenseType   @default(SEAT_BASED)
  licenseAddedBy UserDetails?  @relation("LicenseAddedBy", fields: [addedById], references: [id])
  licenseKeys    LicenseKey[]
}

model LicenseKey {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  licenseId String
  key       String?
  status    LicenseKeyStatus @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  addedById String?          @db.Uuid
  addedBy   UserDetails?     @relation("LicenseKeyAddedBy", fields: [addedById], references: [id])
  license   License          @relation(fields: [licenseId], references: [id])
}

model LicenseRequest {
  id        String        @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  licenseId String
  managerId String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model LicenseAssignment {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  userId           String
  licenseKeyId     String   @unique
  licenseRequestId String   @unique
  assignedAt       DateTime @default(now())
}

model ProcurementRequest {
  id          String            @id @default(dbgenerated("gen_random_uuid()"))
  licenseId   String
  requestedBy String
  approvedBy  String?
  status      ProcurementStatus @default(PENDING)
  quantity    Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ProcurementDocument {
  id                   String   @id @default(dbgenerated("gen_random_uuid()"))
  procurementRequestId String
  fileUrl              String
  uploadedAt           DateTime @default(now())
}

enum Role {
  EMPLOYEE
  MANAGER
  ADMIN
  ACCOUNT_OWNER
  FINANCE
}

enum Department {
  ITSG
  SRE
  HR
  SSED
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  FULFILLED
}

enum ProcurementStatus {
  PENDING
  APPROVED
  DENIED
  PURCHASED
}

enum LicenseStatus {
  AVAILABLE
  FULL
  EXPIRED
}

enum LicenseKeyStatus {
  ACTIVE
  INACTIVE
  ASSIGNED
  REVOKED
}

enum LicenseType {
  SEAT_BASED
  KEY_BASED
}
